

> library(dplyr)

> ?group_by
> by_package <- group_by(cran, package)
> by_package

> summarize(by_package, mean(size))
pack_sum <- summarize(by_package,

                     count = n(),
 
                     unique = n_distinct(ip_id),
  
                    countries = n_distinct(country),
    
                  avg_bytes = mean(size))

> pack_sum
> quantile(pack_sum$count, probs = 0.99) 
> top_counts <- filter(pack_sum, count>679)
> top_counts
>  View(top_counts)

> top_counts_sorted <- arrange(top_counts, desc(count))
> quantile(pack_sum$unique, probs = 0.99)
> top_unique <- filter(pack_sum, unique>465)
> View(top_unique)

> top_unique_sorted <- arrange(top_unique, desc(unique))

# Don't change any of the code below. Just type submit()
# when you think you understand it.

# We've already done this part, but we're repeating it
# here for clarity.

by_package <- group_by(cran, package)
pack_sum <- summarize(by_package,
                      count = n(),
                      unique = n_distinct(ip_id),
                      countries = n_distinct(country),
                      avg_bytes = mean(size))

# Here's the new bit, but using the same approach we've
# been using this whole time.

top_countries <- filter(pack_sum, countries > 60)
result1 <- arrange(top_countries, desc(countries), avg_bytes)

# Print the results to the console.
print(result1)

# Read the code below, but don't change anything. As
# you read it, you can pronounce the %>% operator as
# the word 'then'.
#
# Type submit() when you think you understand
# everything here.

result3 <-
  cran %>%
  group_by(package) %>%
  summarize(count = n(),
            unique = n_distinct(ip_id),
            countries = n_distinct(country),
            avg_bytes = mean(size)
  ) %>%
  filter(countries > 60) %>%
  arrange(desc(countries), avg_bytes)

# Print result to console
print(result3)

> View(result3)

> cran %>%  select(ip_id, country, package, size) %>%
	print
	
> cran %>%
  select(ip_id, country, package, size) %>%
  mutate(size_mb = size/2^20)	

  
> cran %>%
  select(ip_id, country, package, size) %>%
  mutate(size_mb = size / 2^20) %>%
  # Your call to filter() goes here
  filter(size_mb <= 0.5 )
  
> cran %>%
  select(ip_id, country, package, size) %>%
  mutate(size_mb = size / 2^20) %>%
  filter(size_mb <= 0.5) %>%
  # Your call to arrange() goes here
  arrange(desc(size_mb))
  
